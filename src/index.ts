import path from 'path';

import { GenerateTypeFile, InternalSchema, Settings } from './types';
import { analyseSchemaFile, convertSchemaInternal } from './analyseSchemaFile';
import { writeInterfaceFiles } from './writeInterfaceFile';
import { AnySchema } from 'joi';
import { globAsync } from './utils';

export type ConverterOptions = Pick<Settings, 'schemaFile'> & Partial<Settings>;

const DEFAULT_OPTIONS: Omit<Settings, 'schemaFile'> = {
  exportFile: (srcPath, fileName) => {
    const file = path.basename(fileName, '.ts');
    return path.join(srcPath, `${file}.type.ts`);
  },
  debug: false,
  sortPropertiesByName: false,
  indentationCharacters: '  ',
  commentEverything: false,
  indexAllToRoot: false,
  fileHeader: `/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */`,
  defaultToRequired: false,
  useLabelAsInterfaceName: false
};

/**
 * Create types from schemas
 * @returns The success or failure of this operation
 */
export async function convert(options: ConverterOptions): Promise<boolean> {
  const settings = { ...DEFAULT_OPTIONS, ...options };
  const patterns = Array.isArray(settings.schemaFile) ? settings.schemaFile : [settings.schemaFile];

  const scan = patterns.map(p => globAsync(p, { absolute: true, nodir: true }));
  const files = (await Promise.all(scan)).flat();
  if (files.length === 0) {
    throw new Error('No files found, cannot generate interfaces');
  }

  const schemas = await Promise.all(files.map(async file => analyseSchemaFile(file, settings)));
  const noneEmptySchemas = schemas.filter(s => Boolean(s)) as GenerateTypeFile[];

  await writeInterfaceFiles(settings, noneEmptySchemas);

  return true;
}

function defaultSettings(options: Partial<Settings>) {
  return { ...DEFAULT_OPTIONS, ...options } as Settings;
}

export function convertSchema(
  options: Partial<Settings>,
  joi: AnySchema,
  exportedName?: string
): InternalSchema | undefined {
  return convertSchemaInternal(defaultSettings(options), joi, exportedName);
}
